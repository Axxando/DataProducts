clientid <- "187764194160-autkb30f7r9p9eqfss4ongjpo1l4av1g.apps.googleusercontent.com"
clientsecret <- "jeCKyctZz4VpANa0u2YpXyTJ"
ga_token <- authorize(client.id = clientid, client.secret = clientsecret, cache = TRUE)
onemonthago <- today() - days(31)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:source", metrics="ga:sessions", sort="-ga:date,-ga:sessions", token=ga_token)
head(sessions2)
profileid <- "ga:1672835" #IS24 main profile
onemonthago <- today() - days(31)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:source", metrics="ga:sessions", sort="-ga:date,-ga:sessions", token=ga_token)
head(sessions2)
yesterday <- today() - days(1)
twoyearsago <- today() - days(365*2)
onemonthago <- today() - days(31)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:source", metrics="ga:sessions", sort="-ga:date,-ga:sessions", token=ga_token)
head(sessions2)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:sourceMedium", metrics="ga:sessions", sort="-ga:date,-ga:sessions", token=ga_token)
head(sessions2)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:profile,ga:sourceMedium", metrics="ga:sessions", sort="-ga:date,-ga:sessions", token=ga_token)
head(sessions2)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:source,ga:medium", metrics="ga:sessions", sort="-ga:date,-ga:sessions", token=ga_token)
head(sessions2,100)
qplot(sessions2$date, sessions2$sessions)
library(ggplot2)
qplot(sessions2$date, sessions2$sessions)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:source,ga:medium", metrics="ga:sessions", sort="ga:date,-ga:sessions", token=ga_token)
head(sessions2,100)
qplot(sessions2$date, sessions2$sessions)
ggplot(sessions2, aes(x=date, y=sessions)) + geom_line()
sessions3 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date", metrics="ga:sessions", sort="ga:date", token=ga_token)
ggplot(sessions3, aes(x=date, y=sessions)) + geom_line()
clientid <- "187764194160-autkb30f7r9p9eqfss4ongjpo1l4av1g.apps.googleusercontent.com"
clientsecret <- "jeCKyctZz4VpANa0u2YpXyTJ"
ga_token <- authorize(client.id = clientid, client.secret = clientsecret, cache = TRUE)
library(RGA)
library(lubridate)
library(ggplot2)
clientid <- "187764194160-autkb30f7r9p9eqfss4ongjpo1l4av1g.apps.googleusercontent.com"
clientsecret <- "jeCKyctZz4VpANa0u2YpXyTJ"
ga_token <- authorize(client.id = clientid, client.secret = clientsecret, cache = TRUE)
onemonthago <- today() - days(31)
yesterday <- today() - days(1)
sessions2 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:source,ga:medium", metrics="ga:sessions", sort="ga:date,-ga:sessions", token=ga_token)
head(sessions2,100)
qplot(sessions2$date, sessions2$sessions)
sessions3 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date", metrics="ga:sessions", sort="ga:date", token=ga_token)
ggplot(sessions3, aes(x=date, y=sessions)) + geom_line()
sessions3 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:dimension3", metrics="ga:sessions", sort="ga:date", token=ga_token)
head(sessions3,111)
sessions3[source=="meyfy",]
sessions2[source=="meyfy",]
sessions2
sessions2[sessions2$source=="meyfy",]
sessions2[sessions2$source=="meyfy.com",]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
qplot(training, x=x, y=CompressiveStrength)
x=seq(1, length(training$CompressiveStrength.Length)
y=training$CompressiveStrength
qplot(x, y)
x=seq(1, length(training$CompressiveStrength.Length))
y=training$CompressiveStrength
qplot(x, y)
x=seq(1, length(training$CompressiveStrength))
qplot(x, y)
qplot(x, y,colour=training$BlastFurnaceSlag)
qplot(x, y,colour=c(training$BlastFurnaceSlag)
)
qplot(x, y,colour=c(training$BlastFurnaceSlag,training$Cement)
)
qplot(x, y,colour=training$Age)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$SuperPlasticizer, geom="density")
qplot(SuperPlasticizer, data=training, geom="density")
str(training)
qplot(Superplasticizer, data=training, geom="density")
summary(training$Superplasticizer)
log(training$Superplasticizer)
clientid <- "187764194160-autkb30f7r9p9eqfss4ongjpo1l4av1g.apps.googleusercontent.com"
clientsecret <- "jeCKyctZz4VpANa0u2YpXyTJ"
ga_token <- authorize(client.id = clientid, client.secret = clientsecret, cache = TRUE)
library(RGA)
library(lubridate)
library(ggplot2)
clientid <- "187764194160-autkb30f7r9p9eqfss4ongjpo1l4av1g.apps.googleusercontent.com"
clientsecret <- "jeCKyctZz4VpANa0u2YpXyTJ"
ga_token <- authorize(client.id = clientid, client.secret = clientsecret, cache = TRUE)
profileid <- "ga:1672835" #IS24 main profile
yesterday <- today() - days(1)
twoyearsago <- today() - days(365*2)
sessions <- get_ga(profileid, start.date=twoyearsago, end.date=yesterday, dimensions="ga:date", metrics="ga:sessions", token=ga_token)
head(sessions)
qplot(date, sessions, data=sessions)
onemonthago <- today() - days(31)
sessions3 <- get_ga(profileid, start.date=onemonthago, end.date=yesterday, dimensions="ga:date,ga:dimension3", metrics="ga:sessions", sort="ga:date", token=ga_token)
ggplot(sessions3, aes(x=date, y=sessions)) + geom_line()
install.packages("pgmm"); install.packages("tree")
library(pgmm); library(tree)
data(olive)
tr = tree(Area ~ ., olive)
summary(tr)
plot(tr); text(tr)
t(colMeans(olive))
newdata = as.data.frame(t(colMeans(olive)))
predict(tr, newdata)
frmla = Area ~ Region+Palmitic+Palmitoleic+Stearic+Oleic+Linoleic+Linolenic+Arachidic+Eicosenoic
tr = tree(frmla, olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(tr, newdata)
olive2 <- olive
olive2$Area <- factor(olive2$Area)
frmla = Area ~ Region+Palmitic+Palmitoleic+Stearic+Oleic+Linoleic+Linolenic+Arachidic+Eicosenoic
tr = tree(frmla, olive2)
summary(tr)
plot(tr); text(tr)
newdata = as.data.frame(t(colMeans(olive)))
predict(tr, newdata)
str(olive)
head(olive)
tr = tree(Area ~ .-Area, olive)
summary(tr)
plot(tr); text(tr)
newdata = as.data.frame(t(colMeans(olive)))
predict(tr, newdata)
predict.tree(tr, newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
modFit <- train(chd ~ tobacco+obesity+tobacco+typea+ldl,method="glm", family="binomial", data=trainSA)
library(caret)
modFit <- train(chd ~ tobacco+obesity+tobacco+typea+ldl,method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(missClass)
predict(modFit$finalModel,testSA)
testSA
predict(modFit$finalModel,testSA)
test$chd
testSAS$chd
testSA$chd
?train.caret
?train
prediction <-- predict(modFit$finalModel,testSA)
values <- testSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(missClass)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
str(SAheart)
install.packages("ElemStatLearn")
set.seed(13234)
modFit <- train(chd ~ alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
library(caret)
set.seed(13234)
modFit <- train(chd ~ alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
str(modFit)
summary(modFit)
prediction <-- predict(modFit$finalModel,testSA)
values <- testSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(missClass)
predictions
prediction
str(prediction)
prediction[[1]]
prediction[,1
]
summary(prediction)
str(trainSA)
trainSA$chd <- factor(trainSA$chd)
set.seed(13234)
modFit <- train(chd ~ alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
library(e1071)
install.packages("e1071")
library(e1071)
set.seed(13234)
modFit <- train(chd ~ alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
prediction <-- predict(modFit$finalModel,testSA)
values <- testSA$chd
str(testSA)
testSA$chd <- factor(testSA$chd)
prediction <-- predict(modFit$finalModel,testSA)
values <- testSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(missClass)
?predict
prediction$value
?traion
?train
set.seed(13234)
modFit <- train(chd ~ alcohol+obesity+tobacco+typea+ldl, method="glm", family=binomial, data=trainSA)
prediction <-- predict(modFit$finalModel,testSA)
str(prediction)
summary(prediction)
prediction
prediction <-- predict(modFit$finalModel,newdata=testSA)
prediction
prediction$fit
prediction <-- predict(modFit$finalModel,newdata=testSA,se.fit=T)
prediction <-- predict(modFit$finalModel,newdata=testSA,se.fit=TRUE)
prediction <-- predict(modFit$finalModel,newdata=testSA,type="response")
prediction
prediction <-- predict(modFit$finalModel,newdata=testSA,type="terms")
prediction
prediction <-- predict(modFit$finalModel,newdata=testSA,type="link")
prediction
modFit$finalModel
library(ElemStatLearn); library(caret); library(e1071)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction <-- predict(modFit$finalModel,testSA)
values <- testSA$chd
missClass(values,prediction)
summary(missClass)
myprediction <-- predict(modFit$finalModel,trainSA)
myvalues <- trainSA$chd
missClass(myvalues,myprediction)
myprediction2 <-- predict(modFit$finalModel,testSA)
myvalues2 <- testSA$chd
missClass(myvalues2,myprediction2)
set.seed(1234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myprediction <-- predict(modFit$finalModel,trainSA)
myvalues <- trainSA$chd
missClass(myvalues,myprediction)
myprediction2 <-- predict(modFit$finalModel,testSA)
myvalues2 <- testSA$chd
missClass(myvalues2,myprediction2)
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myprediction <-- predict(modFit$finalModel,trainSA)
myvalues <- trainSA$chd
missClass(myvalues,myprediction)
myprediction2 <-- predict(modFit$finalModel,testSA)
myvalues2 <- testSA$chd
missClass(myvalues2,myprediction2)
trainSA$chd
testSA$chd
myprediction
set.seed(1234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
set.seed(12234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
predict(model, trainSA)
prediction <-- predict(modFit,testSA)
values <- testSA$chd
missClass(values,prediction)
prediction <-- predict(modFit,trainSA)
values <- trainSA$chd
missClass(values,prediction)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
modFit
?predict
summary(modFit)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myprediction <-- predict(modFit,trainSA)
myvalues <- trainSA$chd
missClass(myvalues,myprediction)
myprediction2 <-- predict(modFit,testSA)
myvalues2 <- testSA$chd
missClass(myvalues2,myprediction2)
myprediction2
myvalues2
?train
myprediction <-- predict(modFit$finalModel,trainSA)
myprediction
modeFit
modFit
modFit$finalModel
modFit$models
predict(modFit$finalModel,trainSA, type="response")
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myprediction1 <-- predict(modFit$finalModel,trainSA, type="response")
myvalues1 <- trainSA$chd
missClass(myvalues1,myprediction1)
myprediction2 <-- predict(modFit$finalModel,testSA, type="response")
myvalues2 <- testSA$chd
missClass(myvalues2,myprediction2)
myprediction1 <-- predict(modFit$finalModel,trainSA, type="prob")
myvalues1 <- trainSA$chd
missClass(myvalues1,myprediction1)
myprediction2 <-- predict(modFit$finalModel,testSA, type="prob")
myvalues2 <- testSA$chd
missClass(myvalues2,myprediction2)
set.seed(13234)
modFit <- train(chd ~ alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myvalues1 <- trainSA$chd
myprediction1 <-- predict(modFit$finalModel,trainSA, type="response")
missClass(myvalues1,myprediction1)
myvalues2 <- testSA$chd
myprediction2 <-- predict(modFit$finalModel,testSA, type="response")
missClass(myvalues2,myprediction2)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myvalues1 <- trainSA$chd
myprediction1 <-- predict(modFit$finalModel, trainSA, type="response")
missClass(myvalues1, myprediction1)
myvalues2 <- testSA$chd
myprediction2 <-- predict(modFit$finalModel, testSA, type="response")
missClass(myvalues2, myprediction2)
predict(modFit$finalModel, testSA, type="response")
trainSA = SAheart[train,]
testSA = SAheart[-train,]
trainSA$chd <- factor(trainSA$chd)
testSA$chd <- factor(testSA$chd)
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myvalues1 <- trainSA$chd
myprediction1 <-- predict(modFit$finalModel, trainSA, type="response")
missClass(myvalues1, myprediction1)
myvalues2 <- testSA$chd
myprediction2 <-- predict(modFit$finalModel, testSA, type="response")
missClass(myvalues2, myprediction2)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
trainSA$chd <- factor(trainSA$chd)
testSA$chd <- factor(testSA$chd)
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
myvalues1 <- trainSA$chd
myprediction1 <-- predict(modFit$finalModel, trainSA, type="response")
missClass(myvalues1, myprediction1)
myvalues2 <- testSA$chd
myprediction2 <-- predict(modFit$finalModel, testSA, type="response")
missClass(myvalues2, myprediction2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
str(vowel.train)
str(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
str(vowel.test)
set.seed(33833)
?train
set.seed(33833) # or try 3833
model <- train(y ~ ., data=vowel.train, method="rf" )
rfNews()
model <- train(y ~ ., data=vowel.train, method="rf" )
varImp(model, useModel=0)
install.packages("pROC")
library(ElemStatLearn); library(pROC)
varImp(model, useModel=0)
set.seed(3833) # try 33833 or 3833
model <- train(y ~ ., data=vowel.train, method="rf" )
varImp(model, useModel=0)
?train
install.packages("e1071")
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(concrete)
mod <- svm(CompressiveStrength~.,data=training)
pred <- predict(mod, testing)
pred
str(pred)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
acc[2] # RMSE 6.715009
predDF <- data.frame(pred, testing$CompressiveStrength)
predDF
rmse = predDF.pred - predDF.testing.CompressiveStrength
rmse = predDF$pred - predDF$testing.CompressiveStrength
rmse
rmse = (predDF$pred - predDF$testing.CompressiveStrength)^2
rmse
rmse = sum()(predDF$pred - predDF$testing.CompressiveStrength)^2)
rmse
rmse = sum((predDF$pred - predDF$testing.CompressiveStrength)^2)
rmse
rmse = mean((predDF$pred - predDF$testing.CompressiveStrength)^2)
rmse
length(testing$CompressiveStrength)
rmse = sum((predDF$pred - predDF$testing.CompressiveStrength)^2)/length(testing$CompressiveStrength)
rmse
set.seed(325)
mod <- svm(CompressiveStrength~.,data=training)
pred <- predict(mod, testing)
predDF <- data.frame(pred, testing$CompressiveStrength)
rmse = sum((predDF$pred - predDF$testing.CompressiveStrength)^2)/length(testing$CompressiveStrength)
rmse
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
mod <- svm(CompressiveStrength~.,data=training)
pred <- predict(mod, testing)
predDF <- data.frame(pred, testing$CompressiveStrength)
sum((predDF$pred - predDF$testing.CompressiveStrength)^2)
rmse = sum((predDF$pred - predDF$testing.CompressiveStrength)^2)/length(testing$CompressiveStrength)
rmse
sqrt(mean((predDF$pred - predDF$testing.CompressiveStrength)^2))
?adist
t1 ="Bonjour"
t2 ="Guten Tag"
d <- adist(t1,t2,counts=T)
d$counts
d
d[1]
d[4]
d[5]
?attr
attr(d,"trafos")
attr(d,"trafos")[1]
attr(d,"ins")[1]
attr(d,"counts")[1]
attr(d,"counts")[2]
attr(d,"counts")[3]
?show
a <- 2
a <- 2
b <- 3
a+b
install.packages("Rtools")
Sys.getenv()['PATH']
library(Rtools)
library(shiny)
install.packages(shiny)
install.packages("shiny")
install.packages("devtools")
library(shiny)
setwd("C:/Users/andvba/Google Drive/temp/devdataprod/CourseProject/shinyapps")
runApp()
deployApp
deployApp()
library(devtools)
deployApp()
runApp()
?deployApp
??deployApp
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
deployApp()
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name='axxando',
token='60A27F8EDBE28F95DEBBB3F1E093F8EA',
secret='/qCv267AUkI1T7AH1R34n/uKKH0WtnFctcabHB1U')
deployApp()
deployApp()
getwd()
setwd("C:/Users/andvba/Google Drive/temp/devdataprod/CourseProject/DataProductsProject")
runApp()
deployApp()
library(knitr)
install.packages("knitr")
library(knitr)
